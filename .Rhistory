geom_sf(data = phillyBoundary) +
geom_sf(data = shootings, colour="darkred", size=0.5, show.legend = "point") +
labs(title= "Observed Shooting Cases in 2018",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 1.1') +
mapTheme() +
plotTheme(),
ggplot() +
geom_sf(data = phillyBoundary, fill = "#E5E5E5") +
stat_density2d(data = data.frame(st_coordinates(shootings)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis_c(option = "plasma") +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Observed Shooting Cases in 2018",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 1.2') +
mapTheme() +
theme(legend.position = "none") +
plotTheme())
# Aggregate points to the fishnet
shooting_net <-
dplyr::select(shootings) %>%
mutate(countshootings = 1) %>%
aggregate(., philly_fishnet, sum) %>%
mutate(countshootings = replace_na(countshootings, 0),
uniqueID = rownames(.),
cvID = sample(round(nrow(philly_fishnet) / 24),
size=nrow(philly_fishnet), replace = TRUE))
ggplot() +
geom_sf(data = shooting_net, aes(fill = countshootings), color = NA) +
scale_fill_viridis_c(option = "plasma",
name = 'Shooting Counts') +
labs(title = "Observed Shootings Joined to Fishnet, 2018",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 2') +
mapTheme() +
plotTheme()
vars_net <-
rbind(building_demolition, tobacco, affordable_housing, tobacco_violation,
vacant_land, tracts18.MedHHInc,
tracts18.pctPoverty,
tracts18.pctUnemploy,tracts18.pctWhite)
View(vars_net)
# All variables in fishnet
vars_net <-
rbind(building_demolition, tobacco, affordable_housing, tobacco_violation,
vacant_land) %>%
st_join(., philly_fishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(philly_fishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
### Multiple map for feature counts in fishnet
vars_net.long <-
gather(vars_net, Variable, value, -geometry, -uniqueID)
vars <- unique(vars_net.long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol =2, top = "Figure. 3.1 Risk Factors by Fishnet\n"))
## 3.2 Nearest Neighbor Feature
# convenience to reduce length of function names.
st_c <- st_coordinates
st_coid <- st_centroid
## create NN from abandoned cars, k = 3
'%!in%' <- function(x,y)!('%in%'(x,y))
vars_net$tobacco.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(tobacco),
k = 3)
vars_net$building_demolition.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(building_demolition),
k = 3)
vars_net$affordable_housing.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(affordable_housing %>%
filter(geometry %!in% 'c(NaN, NaN)')),
k = 3)
vars_net$tobacco_violation.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(tobacco_violation),
k = 3)
vars_net$vacant_land.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(vacant_land),
k = 3)
## Visualize the nearest three features
vars_net.long.nn <-
dplyr::select(vars_net, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
vars <- unique(vars_net.long.nn$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long.nn, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme() +
plotTheme()}
do.call(grid.arrange,c(mapList, ncol = 2, top = "Figure 3.2 Nearest Neighbor risk Factors by Fishnet\n"))
# IV and DVs all in fishnet
philly_final_net <-
left_join(shooting_net, st_drop_geometry(vars_net), by="uniqueID")
philly_final_net <-
st_centroid(philly_final_net) %>%
st_join(dplyr::select(phillyneigh, mapname), by = "uniqueID") %>%
st_join(dplyr::select(phillypoliceDistricts, District), by = "uniqueID") %>%
st_drop_geometry() %>%
left_join(dplyr::select(philly_final_net, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
# 5. A small multiple scatterplot with correlations
philly.correlation.long <-
st_drop_geometry(philly_final_net) %>%
dplyr::select(-uniqueID, -cvID,-starts_with('mapname'),-starts_with('District')) %>%
gather(Variable, Value, -countshootings)
philly.correlation.cor <-
philly.correlation.long %>%
group_by(Variable) %>%
summarize(philly.correlation = cor(Value, countshootings, use = "complete.obs"))
ggplot(philly.correlation.long, aes(Value, countshootings)) +
geom_point(size = 0.1) +
geom_text(data = philly.correlation.cor, aes(label = paste("r =", round(philly.correlation, 2))),
x=-Inf, y=Inf, vjust = 1.5, hjust = -.1) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
facet_wrap(~Variable, ncol = 4, scales = "free") +
labs(title = "Observed Shooting Crime as a Function of Risk Factors",
subtitle = "Philadelphia, PA\n",
caption = "Figure 5")+
plotTheme()
# 6. A histogram of dependent variable
ggplot(data = philly_final_net) +
geom_histogram(aes(x = countshootings), fill = 'orange') +
scale_x_continuous(breaks = seq(0, 8, by = 1)) +
labs(title="Histogram of Dependent Variable: Count of Observed Shootings",
subtitle = "Philadelphia, PA\n",
caption = "Figure 6") +
xlab('Count of Shootings') +
ylab('Count') +
plotTheme()
# 1. load Libraries
library(sf)
library(tidyverse)
# install.packages('mapview')
library(mapview)
library(spdep)
library(caret)
library(ckanr) # for opening data APIs built on CKAN technology
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(jtools)     # for regression model plots
library(stargazer) # for creating table
library(broom)
library(tufte)
library(rmarkdown)
library(kableExtra)
library(tidycensus)
# new in Lab6
library(RSocrata)
library(viridis)
library(spatstat) # make kernel density map
library(raster)
library(knitr)
library(rgdal)
# 2. Identify functions
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 15,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(color = "darkred", size=15, face="bold"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
# 3. Load Quantile break functions
qBr <- function(df, variable, rnd) {
if (missing(rnd)) {
as.character(quantile(round(df[[variable]],0),
c(.01,.2,.4,.6,.8), na.rm=T))
} else if (rnd == FALSE | rnd == F) {
as.character(formatC(quantile(df[[variable]]), digits = 3),
c(.01,.2,.4,.6,.8), na.rm=T)
}
}
q5 <- function(variable) {as.factor(ntile(variable, 5))}
# Load hexadecimal color palette
palette <- c('#feedde', '#fdbe85', '#fd8d3c', '#e6550d', '#a63603')
# for calculating average nearest neighbor distance.
nn_function <- function(measureFrom,measureTo,k) {
measureFrom_Matrix <- as.matrix(measureFrom)
measureTo_Matrix <- as.matrix(measureTo)
nn <-
get.knnx(measureTo, measureFrom, k)$nn.dist
output <-
as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
dplyr::summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint) %>%
pull() # pull() is similar to $. It's mostly useful because it looks a little nicer in pipes, it also works with remote data frames, and it can optionally name the output.
return(output)
}
# polygon
phillypoliceDistricts <-
st_read("http://data-phl.opendata.arcgis.com/datasets/62ec63afb8824a15953399b1fa819df2_0.geojson") %>%
st_transform('ESRI:102728') %>%
dplyr::select(District = DIST_NUM)
phillyBoundary <-
st_read("http://data.phl.opendata.arcgis.com/datasets/405ec3da942d4e20869d4e1449a2be48_0.geojson") %>%
st_transform('ESRI:102728')
# 2018 Shooting Victims
shootings <-
st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+shootings&filename=shootings&format=geojson&skipfields=cartodb_id') %>%
filter(year == "2018") %>%
na.omit() %>%
st_transform('ESRI:102728')
# Creating a fishnet grid
philly_fishnet <-
st_make_grid(phillyBoundary,
cellsize = 500,
square = TRUE) %>%
.[phillyBoundary] %>%
st_sf() %>%
mutate(uniqueID = rownames(.))
phillyneigh <-
st_read("https://raw.githubusercontent.com/azavea/geo-data/master/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.geojson") %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(philly_fishnet))
# import risk factors
building_demolition <-
st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+demolitions&filename=demolitions&format=geojson&skipfields=cartodb_id') %>%
mutate(year = substr(start_date,1,4)) %>%
filter(year == '2018') %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(philly_fishnet)) %>%
mutate(Legend = "Building Demolition") %>%
dplyr::select(geometry, Legend)
vacant_land <-
st_read('https://opendata.arcgis.com/datasets/b990222a527849229b4192feb4c42dc0_0.geojson') %>%
filter(VACANT_FLAG == "Land") %>%
na.omit() %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(philly_fishnet)) %>%
mutate(Legend = "Vacant Land") %>%
dplyr::select(geometry, Legend)
tobacco <-
st_read('http://data-phl.opendata.arcgis.com/datasets/853a1421e738471b8cc0d6ff755d47ff_0.geojson') %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(philly_fishnet)) %>%
mutate(Legend = "Tobacco") %>%
dplyr::select(geometry, Legend) %>%
na.omit()
tobacco_violation <-
st_read('https://opendata.arcgis.com/datasets/25b43fb8cae84e8a89d74d8707bbb5f2_0.geojson') %>%
filter(COMP_CHK_Y == '2018')%>%
na.omit() %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(philly_fishnet)) %>%
mutate(Legend = "Tobacco Violation") %>%
dplyr::select(geometry, Legend)
affordable_housing <-
st_read('https://opendata.arcgis.com/datasets/ca8944190b604b2aae7eff17c8dd9ef5_0.geojson') %>%
filter(FISCAL_YEAR_COMPLETE <= "2018") %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(philly_fishnet)) %>%
mutate(Legend = "Affordable Housing") %>%
dplyr::select(geometry, Legend)
# Census data
# View(load_variables(2018,'acs5',cache = TRUE))
tracts18 <-
get_acs(geography = "tract", variables = c("B00001_001E","B02001_002E","B19013_001E","B25002_001E","B06012_002E","B27011_008E"),
year=2018, state=42, county=101, geometry=T, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B00001_001E,
Whites = B02001_002E,
MedHHInc = B19013_001E,
TotalUnit = B25002_001E,
TotalPoverty = B06012_002E,
TotalUnemployment = 	B27011_008E) %>%
dplyr::select(-NAME, -starts_with("B")) %>% #-starts_with("B") awesome!
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop * 100,0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop *100, 0),
pctUnemploy = ifelse(TotalPop > 0, TotalUnemployment / TotalPop *100, 0)
) %>%
dplyr::select(-Whites, -TotalPoverty ,-TotalUnemployment,-GEOID) %>%
st_transform(st_crs(philly_fishnet))
tracts18.MedHHInc <- tracts18 %>%
dplyr::select(MedHHInc) %>%
rename(Legend = MedHHInc)
tracts18.pctWhite <- tracts18 %>%
dplyr::select(pctWhite)%>%
rename(Legend = pctWhite)
tracts18.pctPoverty <- tracts18 %>%
dplyr::select(pctPoverty)%>%
rename(Legend = pctPoverty)
tracts18.pctUnemploy <- tracts18 %>%
dplyr::select(pctUnemploy)%>%
rename(Legend = pctUnemploy)
# Aggregate points to the fishnet
shooting_net <-
dplyr::select(shootings) %>%
mutate(countshootings = 1) %>%
aggregate(., philly_fishnet, sum) %>%
mutate(countshootings = replace_na(countshootings, 0),
uniqueID = rownames(.),
cvID = sample(round(nrow(philly_fishnet) / 24),
size=nrow(philly_fishnet), replace = TRUE))
ggplot() +
geom_sf(data = shooting_net, aes(fill = countshootings), color = NA) +
scale_fill_viridis_c(option = "plasma",
name = 'Shooting Counts') +
labs(title = "Observed Shootings Joined to Fishnet, 2018",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 2') +
mapTheme() +
plotTheme()
# All variables in fishnet
vars_net <-
rbind(building_demolition, tobacco, affordable_housing, tobacco_violation,
vacant_land) %>%
st_join(., philly_fishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(philly_fishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
### Multiple map for feature counts in fishnet
vars_net.long <-
gather(vars_net, Variable, value, -geometry, -uniqueID)
vars <- unique(vars_net.long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol =2, top = "Figure. 3.1 Risk Factors by Fishnet\n"))
## 3.2 Nearest Neighbor Feature
# convenience to reduce length of function names.
st_c <- st_coordinates
st_coid <- st_centroid
## create NN from abandoned cars, k = 3
'%!in%' <- function(x,y)!('%in%'(x,y))
vars_net$tobacco.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(tobacco),
k = 3)
vars_net$building_demolition.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(building_demolition),
k = 3)
vars_net$affordable_housing.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(affordable_housing %>%
filter(geometry %!in% 'c(NaN, NaN)')),
k = 3)
vars_net$tobacco_violation.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(tobacco_violation),
k = 3)
vars_net$vacant_land.nn <-
nn_function(st_c(st_coid(vars_net)),
st_c(vacant_land),
k = 3)
## Visualize the nearest three features
vars_net.long.nn <-
dplyr::select(vars_net, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
vars <- unique(vars_net.long.nn$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long.nn, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme() +
plotTheme()}
do.call(grid.arrange,c(mapList, ncol = 2, top = "Figure 3.2 Nearest Neighbor risk Factors by Fishnet\n"))
# IV and DVs all in fishnet
philly_final_net <-
left_join(shooting_net, st_drop_geometry(vars_net), by="uniqueID")
philly_final_net <-
st_centroid(philly_final_net) %>%
st_join(dplyr::select(phillyneigh, mapname), by = "uniqueID") %>%
st_join(dplyr::select(phillypoliceDistricts, District), by = "uniqueID") %>%
st_drop_geometry() %>%
left_join(dplyr::select(philly_final_net, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
## 4.1 spatial weights matrix
philly_final_net.nb <- poly2nb(as_Spatial(philly_final_net), queen=TRUE)
philly_final_net.weights <- nb2listw(philly_final_net.nb, style="W", zero.policy=TRUE)
philly_final_net.localMorans <-
cbind(
as.data.frame(localmoran(philly_final_net$countshootings, philly_final_net.weights)),
as.data.frame(philly_final_net)) %>%
st_sf() %>%
dplyr::select(Shooting_Count = countshootings,
Local_Morans_I = Ii,
P_Value = `Pr(z > 0)`) %>%
mutate(Significant_Hotspots = ifelse(P_Value <= 0.05, 1, 0)) %>%
gather(Variable, Value, -geometry)
vars <- unique(philly_final_net.localMorans$Variable)
varList <- list()
for(i in vars){
varList[[i]] <-
ggplot() +
geom_sf(data = filter(philly_final_net.localMorans, Variable == i),
aes(fill = Value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i,
caption = "Figure 4. Local Moran's I Statistics, Observed Shooting Cases") +
mapTheme() + theme(legend.position="bottom") +
plotTheme()}
do.call(grid.arrange,c(varList, ncol = 4, top = "Local Morans I statistics, Burglary"))
### Distance to highly significant shooting hotpot
philly_final_net <-
philly_final_net %>%
mutate(shooting.isSig =
ifelse(localmoran(philly_final_net$countshootings,
philly_final_net.weights)[,5] <= 0.0000001, 1, 0)) %>%
mutate(shooting.isSig.dist =
nn_function(st_coordinates(st_centroid(philly_final_net)),
st_coordinates(st_centroid(
filter(philly_final_net, shooting.isSig == 1))), 1))
# 5. A small multiple scatterplot with correlations
philly.correlation.long <-
st_drop_geometry(philly_final_net) %>%
dplyr::select(-uniqueID, -cvID,-starts_with('mapname'),-starts_with('District')) %>%
gather(Variable, Value, -countshootings)
philly.correlation.cor <-
philly.correlation.long %>%
group_by(Variable) %>%
summarize(philly.correlation = cor(Value, countshootings, use = "complete.obs"))
ggplot(philly.correlation.long, aes(Value, countshootings)) +
geom_point(size = 0.1) +
geom_text(data = philly.correlation.cor, aes(label = paste("r =", round(philly.correlation, 2))),
x=-Inf, y=Inf, vjust = 1.5, hjust = -.1) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
facet_wrap(~Variable, ncol = 4, scales = "free") +
labs(title = "Observed Shooting Crime as a Function of Risk Factors",
subtitle = "Philadelphia, PA\n",
caption = "Figure 5")+
plotTheme()
# 6. A histogram of dependent variable
ggplot(data = philly_final_net) +
geom_histogram(aes(x = countshootings), fill = 'orange') +
scale_x_continuous(breaks = seq(0, 8, by = 1)) +
labs(title="Histogram of Dependent Variable: Count of Observed Shootings",
subtitle = "Philadelphia, PA\n",
caption = "Figure 6") +
xlab('Count of Shootings') +
ylab('Count') +
plotTheme()
